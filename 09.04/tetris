from tkinter import *
import random

m = False

fill = ["#FF0000","#FFFF00","#00FF00","#00FFFF","#0000FF","#4B0082","#FF4500"]

root = Tk()
root.title("Тетрис")

pole_height = 700
pole_width = 600

h = 35
w = int(pole_width/(pole_height/h))

height = pole_height / h
width = pole_width / w

c = Canvas(root, width=pole_width, height=pole_height, background="#aaf2f2")
c.pack()

pole = []
rec = []
# list_fill = []
# int_fill = 0
m = False
for i in range(h):
    pole.append([])
    rec.append([])
    for j in range(w+1):
        pole[i].append(" ")
        rec[i].append("")
# for i in range(2):
#     for j in range(len(pole[0])-1):
#         pole[-i*2-1][j] = "*"

class Tetris(object):
    def __init__(self):
        global pole,f
        self.forms = [[[" "," "," "," "],
                       [" "," "," "," "],
                       [" ","#","#"," "],
                       [" ","#","#"," "]],
                      
                      [[" ","#"," "," "],
                       [" ","#"," "," "],
                       [" ","#"," "," "],
                       [" ","#"," "," "]],
                      
                      [[" "," "," "," "],
                       [" "," "," "," "],
                       [" ","#","#"," "],
                       ["#","#"," "," "]],
                      
                      [[" "," "," "," "],
                       [" "," "," "," "],
                       ["#","#"," "," "],
                       [" ","#","#"," "]],
                      
                      [[" "," "," "," "],
                       [" ","#"," "," "],
                       [" ","#"," "," "],
                       [" ","#","#"," "]],
                      
                      [[" "," "," "," "],
                       [" "," ","#"," "],
                       [" "," ","#"," "],
                       [" ","#","#"," "]],
                      
                      [[" "," "," "," "],
                       [" "," "," "," "],
                       ["#","#","#"," "],
                       [" ","#"," "," "]]]
        self.x = 13
        self.y = 1
        self.p = False
        self.tetris = []
        self.rot = 1
        self.rot_data = []
        self.m = 0
        self.n = 0
        self.rev_data = 0
    def new(self):
        global pole
        self.form = random.randint(0,len(self.forms)-1)
        self.fill = fill[self.form]
        for i in range(4):
            for j in range(4):
                if self.forms[self.form][i][j]=="#":
                    pole[i+1][j+int(w//2)-1] = "#"
    def move_pole(self):
        global pole,f
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if pole[len(pole)-i-1][len(pole[j])-j-1] == "#" and pole[len(pole)-i][len(pole[j])-j-1] != "*":
                    pole[len(pole)-i-1][len(pole[j])-j-1] = " "
                    pole[len(pole)-i][len(pole[j])-j-1] = "#"
    def move_rec(self):
        #print(self.stop)
        global pole
        self.stop = False
        self.i = True
        self.move = True
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if len(pole) - 1 > i + 1:
                    if pole[i][j] == "#" and pole[i+1][j] == "*":
                        self.move = False
        for i in range(len(pole[-1])):
            if pole[-1][i] == "#":
                self.stop = True
        if self.stop == False and self.move == True:#self.y <= 600
            tetr[-1].move_pole()
            self.y += 1
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if self.i == True:
                    if pole[i-1][j] == "#" and pole[i][j] == "*":
                        self.i = False
                        for i in range(len(pole)):
                                for j in range(len(pole[i])):
                                    if pole[i][j] == "#":
                                        pole[i][j] = "*"
                        new()
                    elif self.stop == True:#self.y == 600:
                        self.i = False
                        for i in range(len(pole)):
                                for j in range(len(pole[i])):
                                    if pole[i][j] == "#":
                                        pole[i][j] = "*"
                        new()
                        
    def pole_right(self):
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if pole[-i-1][-j-1] == "#":
                    pole[-i-1][-j-1] = " "
                    pole[-i-1][-j] = "#"
        self.x += 1
    def pole_left(self):
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if pole[i][j-1] == "#":
                    pole[i][j-1] = " "
                    pole[i][j-2] = "#"
        self.x -= 1
    def move_right(self):
        self.right = True
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if pole[i][-2] == "#":
                    self.right = False
                elif pole[i][j] == "#":
                    if pole[i][j+1] == "*":
                        self.right = False
        if (self.form == 0 or self.form == 2 or self.form == 3 or self.form == 4 or self.form == 6):# and self.x <= 26
            if self.right == True:
                tetr[-1].pole_right()
        if (self.form == 1 or self.form == 5):# and self.x <= 27
            if self.right == True:
                tetr[-1].pole_right()
                
    def move_left(self):
        self.left = True
        for i in range(len(pole)):
            for j in range(len(pole[i])):
                if pole[i][0] == "#":
                    self.left = False
                elif pole[i][j] == "#":
                    if pole[i][j-1] == "*":
                        self.left = False
        if (self.form == 0 or self.form == 1 or self.form == 4):# and self.x >= 0
            if self.left == True:
                tetr[-1].pole_left()
        if (self.form == 2 or self.form == 3 or self.form == 5 or self.form == 6):# and self.x >= 1
            if self.left == True:
                tetr[-1].pole_left()
    def rotate(self):
        if self.x >= 0 and self.x <= 26: 
            if self.form != 0:
                tetr[-1].pole_rotate(self.forms[self.form],self.rot)
    def pole_rotate(self,data,times = 1):
        self.rot_data = []
        self.not_rotate = False
        for t in range(times):
            self.m = len(data)
            self.n = len(data[0])
            self.rev_data = data[ : : -1]
            self.rot_data = [[self.rev_data[j][i] for j in range(self.m)] for i in range(self.n)]
            data = self.rot_data
            
        for i in range(4):
            for j in range(4):
                if pole[self.y+i][self.x+j] == "*":
                    self.not_rotate = True
        if self.not_rotate == False:
            for i in range(4):
                for j in range(4):
                    #print(str(i) + "  " + str(j))
                    pole[self.y+i][self.x+j] = self.rot_data[i][j]
            self.rot += 1
            if self.rot > 4:
                self.rot = 1
        
        
def pol():
    for i in range(len(pole)):
        for j in range(len(pole[i])):
            c.delete(rec[i][j])
            if pole[i][j] == "#":
                rec[i][j] = c.create_rectangle(j*width,i*height,j*width+width,i*height+height,fill = tetr[-1].fill)#list_fill[int_fill]
            if pole[i][j] == "*":
                rec[i][j] = c.create_rectangle(j*width,i*height,j*width+width,i*height+height,fill = "gray")
def new():
    tetr.append(Tetris())
    tetr[-1].new()
score = 0

def clean():
    global score,lbl
    stroke = 0
    down_stroke = len(pole) - 1
    for i in range(len(pole)):
        if pole[-i].count("*") == len(pole[-1])-1:
            down_stroke = -i
            break
    #print(down_stroke)
    if pole[down_stroke].count("*") == len(pole[down_stroke])-1:
        stroke += 1
        for j in range(len(pole[0])-1):
                pole[down_stroke][j] = " "
    if pole[down_stroke-1].count("*") == len(pole[down_stroke-1])-1:
        stroke += 1
        for j in range(len(pole[0])-1):
                pole[down_stroke-1][j] = " "
    if pole[down_stroke-2].count("*") == len(pole[down_stroke-2])-1:
        stroke += 1
        for j in range(len(pole[0])-1):
                pole[down_stroke-2][j] = " "
    if pole[down_stroke-3].count("*") == len(pole[down_stroke-3])-1:
        stroke += 1
        for j in range(len(pole[0])-1):
                pole[down_stroke-3][j] = " "
    if stroke > 0:
#         for i in range(stroke):
#             for j in range(len(pole[0])-1):
#                 pole[down_stroke-i][j] = " "
                
        for i in range(stroke):
            for j in range(len(pole[0])-1):
                for x in range(len(pole)+down_stroke):
                    if pole[-x-1+down_stroke][j] == "*":#x 0 - 
                        pole[-x-1+down_stroke][j] = " "
                        pole[-x+down_stroke][j] = "*"
        print(stroke)
        if stroke == 1:
            score += 100
        elif stroke == 2:
            score += 300
        elif stroke == 3:
            score += 700
        elif stroke == 4:
            score += 1500
time = 600
start = False
def main():
    global time
    tetr[-1].move_rec()
    pol()
    clean()
    time -= 0.2
    if time < 300:
        time = 300
    lbl.configure(text = "счёт: " + str(score))
    root.after(round(time), main)

lbl = Label(root,text="счёт: " + str(score),font=("Calibri", 20))
lbl.place(x = 10,y = 10)

tetr = []
tetr.append(Tetris())
tetr[-1].new()
c.focus_set()
pol()

def movement_handler(event):
    global m,time,start
    if start == True:
        if event.keysym == "a":
            tetr[-1].move_left()
            pol()
        elif event.keysym == "u":
            print(pole)
        elif event.keysym == "s":
            tetr[-1].move_rec()
            pol()
            time -= 0.2
        elif event.keysym == "d":
            tetr[-1].move_right()
            pol()
        elif event.keysym == "w":
            tetr[-1].rotate()
            pol()
    if event.keysym == "space" and m == False:
        main()
        m = True
        start = True
c.bind("<KeyPress>", movement_handler)

root.mainloop()
